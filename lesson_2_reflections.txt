What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, it sets up to be able to do version control
with Git. It creates the hidden .git folder that holds all the metadata. You
need to do it to be able to use all the version control features we discussed.


How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area contains all the files you wish to commit to your repository.
The working directory is the directory where you are editing and making changes
to your files. It provides the value of having granular control over which files
to commit. As discussed earlier, it's ideal to have a commit for every logical
change, allowing to also include a commit message. By having an staging area, it
allows us to have this when we edit multiple files between commits.


How can you use the staging area to make sure you have one commit per logical
change?

You can use the staging area as well as commands such as git diff and git diff
--staged to compare the staging area with the most recent commit. You can use
these commands to compare the differences in files to ensure that you only have
logical change per commit.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Some situations that would be useful with branches are when you want to make
some changes, experiment with new features or some other changes that while
maintaining a working, usable master branch. Branches allow you to go off in a
different direction with your program while keeping the original functionality
intact.


How do the diagrams help you visualize the branch structure?

The diagrams help you visualize the branch structure by seeing the big picture
of where and which commit you decide to branch of from and starting messing
around with a new feature, for example. You can have many branches off the
master, so having the diagram allows you to keep track of all of them. 


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

The result of merging two branches together is one single branch that contains
the changes made in each. We represent it in the diagram the way it is because
we want to include changes made in each branch, not transferring the state of
one branch to the other.
